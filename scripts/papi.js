const axios = require('axios');
const path = require('path');
const fs = require('fs');
const fm = require('front-matter');
const yaml = require('js-yaml');

require('dotenv').config();

PAPI_URL = "https://api.segmentapis.com"

const slugify = (displayName) => {
  let slug = displayName
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace('-&-', '-')
    .replace('/', '-')
    .replace(/[\(\)]/g, '')
    .replace('.','-')

  if (slug === '-net') slug = 'net'
  if (slug === 'talon-one') slug = 'talonone'
  if (slug === 'roku-alpha') slug = 'roku'
  if (slug === 'shopify-by-littledata') slug = 'shopify-littledata'
  if (slug === 'talon-one') slug = 'talonone'
  if (slug == 'google-adwords-remarketing-lists-customer-match') slug = 'adwords-remarketing-lists'
  if (slug == 'canny-classic') slug = 'canny'
  return slug
}

let endpoint = '/catalog/destinations/'

const getCatalog = async (url, page_token = "MA==") => {
  try {
   const res = await axios.get(url, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PAPI_TOKEN}`
      },
      data: {
        "pagination": {
          "count": 200,
          "cursor": page_token
        }
      }
    });
    //console.log(JSON.stringify(res.data))
    return res.data
  } catch (error) {
    console.log(error)
  }
}

// getCatalog(`${PAPI_URL}/catalog/destinations/`)

const updateDestinations = async () => {
  let destinations = []
  let destinationsUpdated = []
  let nextPageToken = "MA=="

  while (nextPageToken !== null) {
    const res = await getCatalog(`${PAPI_URL}/catalog/destinations/`, nextPageToken)
    destinations = destinations.concat(res.data.destinationsCatalog)
    nextPageToken = res.data.pagination.next
    //console.log(destinations)
  }
  destinations.forEach(destination => {
    
    
    let settings = destination.options
    settings.sort((a, b) => {
      if(a.name < b.name) { return -1; }
      if(a.name > b.name) { return 1; }
      return 0;
    })
    // settings.forEach(setting => {
    //   if (setting.settings.length > 0) {
    //     setting.settings.sort((a, b) => {
    //       if(a.name < b.display_name) { return -1; }
    //       if(a.name > b.name) { return 1; }
    //       return 0;
    //     })
    //   }
    // })




    let updatedDestination = {
      display_name: destination.name,
      name: destination.name,
      previous_names: destination.previousNames,
      website: destination.website,
      status: destination.status,
      logo: {
        url: destination.logos.default
      },
      mark: {
        url: destination.logos.mark
      },
      methods: destination.supportedMethods,
      components: destination.components,
      platforms: destination.supportedPlatforms,
      browserUnbundlingSupported: destination.supportedFeatures.browserUnbundling,
      browserUnbundlingPublic: destination.supportedFeatures.browserUnbundlingPublic,
      replay: destination.supportedFeatures.replay,
      settings
    }
    destinationsUpdated.push(updatedDestination)

    //console.log(destinationsUpdated)

  const options = { noArrayIndent: true };
  output = "# AUTOGENERATED FROM PUBLIC API. DO NOT EDIT\n"
  var todayDate = new Date().toISOString().slice(0,10);
  output += "# destination data last updated " + todayDate + " \n";
  output += yaml.safeDump({ items: destinationsUpdated }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalog/destinations_papi.yml`), output);

  })
}

updateDestinations()